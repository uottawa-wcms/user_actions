<?php

function user_actions_theme() {
  return array(
    'user_actions' => array(
      'variables' => array(
        'links' => array(),
      ),
      'file' => 'user_actions.theme.inc',
    ),
  );
}

function user_actions_permission() {
  return array(
    'user_actions_access' => array(
      'title' => t('Ability to view the user action menu'),
      'description' => t('Users with this permission will be able to view the
        user action menu where it is available.'),
    ),
  );
}

function user_actions_preprocess_node(&$vars) {
  if (node_access('update', $vars['node'])) {
    $vars['user_actions']['edit'] = array(
      'title' => t('Edit'),
      'path' => 'node/' . $vars['node']->nid . '/edit',
      'is_primary' => TRUE,
      'weight' => -25,
    );
  }
  if (node_access('delete', $vars['node'])) {
    $vars['user_actions']['delete'] = array(
      'title' => t('Delete'),
      'path' => 'node/' . $vars['node']->nid . '/delete',
      'weight' => 25,
    );
  }
  if (_node_revision_access($vars['node'])) {
    $vars['user_actions']['revise'] = array(
      'title' => t('Manage Revisions'),
      'path' => 'node/' . $vars['node']->nid . '/revisions',
      'weight' => 15,
    );
  }
}

function user_actions_process(&$vars, $hook) {
  if (user_access('user_actions_access')) {
    if (!empty($vars['user_actions'])) {
      if (count($vars['user_actions'])) {
        if (is_array($vars['classes'])) {
          $vars['classes'][] = 'action-list-container';
        } elseif (empty($vars['classes'])) {
          $vars['classes'] = 'action-list-container';
        } else {
          $vars['classes'] .= ' action-list-container';
        }
        usort($vars['user_actions'], '_user_actions_sort_by_weight');
        $vars['user_action_bar'] = theme('user_actions', array(
          'links' => $vars['user_actions']
        ));
      }
    }
  }
}

function _user_actions_sort_by_weight($a, $b) {
  return $b['weight'] - $a['weight'];
}